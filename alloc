// <!--
// The MIT License (MIT)
//
// Copyright (c) 2024 Kris Jusiak <kris@jusiak.net>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
#if 0
// -->
[Overview](#Overview) / [API](#API) / [FAQ](#FAQ)

## ALLOC: Memory Allocator library

[![MIT Licence](http://img.shields.io/badge/license-MIT-blue.svg)](https://opensource.org/license/mit)
[![Version](https://img.shields.io/github/v/release/qlibs/alloc)](https://github.com/qlibs/alloc/releases)
[![Build](https://img.shields.io/badge/build-green.svg)](https://godbolt.org/z/nE538GxM6)
[![Try it online](https://img.shields.io/badge/try%20it-online-blue.svg)](https://godbolt.org/z/MYY5e7Yro)

  > [https://en.wikipedia.org/wiki/Allocator_C++](https://en.wikipedia.org/wiki/Allocator_(C%2B%2B))

### Features

- Single header (https://raw.githubusercontent.com/qlibs/alloc/main/alloc)
- Minimal [API](#api)
- Verifies itself upon include (can be disabled with `-DNTEST`)

### Requirements

- C++20 ([clang++12+, g++11+](https://en.cppreference.com/w/cpp/compiler_support)) / [Linux](https://en.wikipedia.org/wiki/Linux)

---

### Overview

```cpp
static_assert(alloc::allocator<std::allocator<int>>);
static_assert(alloc::allocator<alloc::stack<int, 1024u>>);
static_assert(alloc::allocator<alloc::huge_pages<int>>);
static_assert(alloc::allocator<alloc::transparent_huge_pages<int>>);
static_assert(alloc::allocator<alloc::numa<int>>);
```

```cpp
std::vector<int, alloc::stack<int, 1024u>> v{};
```

```cpp
// echo 20 > /proc/sys/vm/nr_hugepages
std::vector<int, alloc::huge_pages<int>> v{};
```

```cpp
// echo always > /sys/kernel/mm/transparent_hugepage/hugepages-2048kB/enabled
std::vector<int, alloc::transparent_huge_pages<int>> v{};
```

```cpp
// -lnuma (requires libnuma-dev)
std::vector<int, alloc::numa<int>> v{};
```

---

### API

```cpp
template<class TAllocator>
concept allocator = requires(TAllocator alloc,
                             typename TAllocator::value_type* ptr,
                             std::size_t n) {
  typename TAllocator::value_type;
  { alloc.allocate(n) } -> std::same_as<decltype(ptr)>;
  { alloc.deallocate(ptr, n) } -> std::same_as<void>;
  #if __cpp_lib_allocate_at_least >= 202302L
  { allocate_at_least(n) } -> std::same_as<std::allocation_result<T*, std::size_t>>;
  #endif
};

template<class T,
         std::size_t N,
         std::size_t alignment = alignof(T),
         auto on_error = [] { return nullptr; }>
  requires (alignment <= alignof(std::max_align_t)) and (not (N % alignment))
struct stack {
  using value_type = T;

  constexpr stack() noexcept = default;

  [[nodiscard]] constexpr auto allocate(std::size_t n) noexcept(noexcept(on_error())) -> T*;

  #if __cpp_lib_allocate_at_least >= 202302L
  constexpr std::allocation_result<T*, std::size_t>
  allocate_at_least(std::size_t n) noexcept(noexcept(allocate(n));
  #endif

  constexpr void deallocate(T* ptr, std::size_t n) noexcept;
};

template <class T,
          std::size_t N = (1u << 21u),
          auto on_error = [] { return nullptr; }>
struct huge_pages {
  using value_type = T;

  constexpr huge_pages() noexcept = default;

  [[nodiscard]] constexpr auto allocate(std::size_t n) noexcept(noexcept(on_error())) -> T*;

  #if __cpp_lib_allocate_at_least >= 202302L
  constexpr std::allocation_result<T*, std::size_t>
  allocate_at_least(std::size_t n) noexcept(noexcept(allocate(n));
  #endif

  constexpr void deallocate(T *ptr, std::size_t n) noexcept;
};

template <class T,
          std::size_t N = (1u << 21u),
          auto on_error = [] { return nullptr; }>
struct transparent_huge_pages {
  using value_type = T;

  constexpr transparent_huge_pages() noexcept = default;

  T *allocate(std::size_t n);

  #if __cpp_lib_allocate_at_least >= 202302L
  constexpr std::allocation_result<T*, std::size_t>
  allocate_at_least(std::size_t n) noexcept(noexcept(allocate(n));
  #endif

  constexpr void deallocate(T *ptr, std::size_t n) noexcept;
};

template<class T, auto on_error = [] { return nullptr; }>
struct numa {
  using value_type = T;

  constexpr numa(node_type node = {}) noexcept;

  [[nodiscard]] constexpr auto allocate(std::size_t n) noexcept(noexcept(on_error())) -> T*;

  #if __cpp_lib_allocate_at_least >= 202302L
  constexpr std::allocation_result<T*, std::size_t>
  allocate_at_least(std::size_t n) noexcept(noexcept(allocate(n));
  #endif

  constexpr void deallocate(T* ptr, std::size_t n) noexcept;
};
```

---

### FAQ

- Acknowledgments

  > std::allocator
    > - https://eel.is/c++draft/allocator.requirements
    > - https://en.cppreference.com/w/cpp/memory/allocator

  > Huge Pages (HP)
    > - https://www.kernel.org/doc/html/latest/admin-guide/mm/hugetlbpage.html
    > - https://www.man7.org/linux/man-pages/man2/mmap.2.html
    > - https://www.intel.com/content/www/us/en/docs/programmable/683840/1-2-1/enabling-hugepages.html
    > - https://github.com/libhugetlbfs/libhugetlbfs
    > - https://wiki.debian.org/Hugepages

  > Transparent Huge Pages (THP)
    > - https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html
    > - https://man7.org/linux/man-pages/man2/madvise.2.html
    > - https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/6/html/performance_tuning_guide/s-memory-transhuge

  > Non Uniform Memory Access (NUMA)
    > - https://en.wikipedia.org/wiki/Non-uniform_memory_access
    > - https://man7.org/linux/man-pages/man3/numa.3.html
    > - https://www.intel.com/content/www/us/en/developer/articles/technical/use-intel-quickassist-technology-efficiently-with-numa-awareness.html
<!--
#endif

#pragma once

#include <memory>
#include <cassert>
#include <array>
#include <bitset>
#include <bit>
#include <concepts>
#include <numeric>
#include <cstdint>
#include <cstddef>

namespace alloc::inline v1_0_2 {
template<class TAllocator>
concept allocator = requires(TAllocator alloc, typename TAllocator::value_type* ptr, std::size_t n) {
  typename TAllocator::value_type;
  { alloc.allocate(n) } -> std::same_as<decltype(ptr)>;
  { alloc.deallocate(ptr, n) } -> std::same_as<void>;
  #if __cpp_lib_allocate_at_least >= 202302L
  { allocate_at_least(n) } -> std::same_as<std::allocation_result<T*, std::size_t>>;
  #endif
};
} // mem

namespace alloc::inline v1_0_2 {
template<class T, std::size_t N, std::size_t alignment = alignof(T), auto on_error = [] { return nullptr; }>
  requires (alignment <= alignof(std::max_align_t)) and (not (N % alignment))
struct stack {
  using value_type = T;
  using stack_type = std::byte;
  template<class U> struct rebind {
    using other = stack<U, N, alignment, on_error>;
  };
  static constexpr auto align = [](std::size_t n) { return (n + (alignment - 1u)) & ~(alignment - 1u); };

  constexpr stack() noexcept = default;

  [[nodiscard]] constexpr auto allocate(std::size_t n) noexcept(noexcept(on_error())) -> T* {
    const auto aligned = align(n * sizeof(T));
    if (std::size_t(data.data() + N - sp) < align(n * sizeof(T))) [[unlikely]] {
      return on_error();
    }
    auto ptr = std::bit_cast<T*>(sp);
    sp += aligned;
    return ptr;
  }

  #if __cpp_lib_allocate_at_least >= 202302L
  constexpr std::allocation_result<T*, std::size_t> allocate_at_least(std::size_t n) noexcept(noexcept(allocate(n)) {
    return { allocate(n), align(n * sizeof(T)) / sizeof(T) };
  }
  #endif

  constexpr void deallocate(T* ptr, std::size_t n) noexcept {
    const auto aligned = align(n * sizeof(T));
    auto p = std::bit_cast<stack_type*>(ptr);
    if (p + aligned != sp) [[unlikely]] {
      return;
    }
    sp = p;
  }

  alignas(alignment) std::array<stack_type, N> data{};
  stack_type* sp{data.data()};
};
} // namespace mem

#if __has_include(<sys/mman.h>)
#include <sys/mman.h>
namespace alloc::inline v1_0_2 {
/**
 * `echo 20 > /proc/sys/vm/nr_hugepages`
 * https://www.kernel.org/doc/html/latest/admin-guide/mm/hugetlbpage.html
 * https://www.man7.org/linux/man-pages/man2/mmap.2.html
 * https://www.intel.com/content/www/us/en/docs/programmable/683840/1-2-1/enabling-hugepages.html
 * https://github.com/libhugetlbfs/libhugetlbfs
 * https://wiki.debian.org/Hugepages
 */
template <class T, std::size_t N = (1u << 21u), auto on_error = [] { return nullptr; }>
struct huge_pages {
  using value_type = T;
  template<class U> struct rebind {
    using other = huge_pages<U, N, on_error>;
  };

  static constexpr auto size = N;
  static constexpr auto prot = PROT_READ | PROT_WRITE;
  static constexpr auto flags = MAP_PRIVATE | MAP_ANONYMOUS | MAP_POPULATE | MAP_HUGETLB;
  static constexpr auto round = [](std::size_t n) { return (((n - 1u) / N) + 1u) * N; };

  constexpr huge_pages() noexcept = default;

  [[nodiscard]] constexpr auto allocate(std::size_t n) noexcept(noexcept(on_error())) -> T* {
    if (n > std::numeric_limits<std::size_t>::max() / sizeof(T)) [[unlikely]] {
      return on_error();
    }
    auto ptr = std::bit_cast<T*>(mmap(nullptr, round(n * sizeof(T)), prot, flags, -1, 0));
    if (ptr == MAP_FAILED) [[unlikely]] {
      return on_error();
    }
    return ptr;
  }

  #if __cpp_lib_allocate_at_least >= 202302L
  constexpr std::allocation_result<T*, std::size_t> allocate_at_least(std::size_t n) noexcept(noexcept(allocate(n)) {
    return { allocate(n), round(n * sizeof(T)) / sizeof(T) };
  }
  #endif

  constexpr void deallocate(T *ptr, std::size_t n) noexcept {
    munmap(ptr, round(n));
  }
};
} // namespace mem
#endif

#if __has_include(<sys/mman.h>) and __has_include(<cstdlib>)
#include <sys/mman.h>
#include <cstdlib>
namespace alloc::inline v1_0_2 {
/**
 * `echo always > /sys/kernel/mm/transparent_hugepage/hugepages-2048kB/enabled`
 * https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html
 * https://man7.org/linux/man-pages/man2/madvise.2.html
 * https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/6/html/performance_tuning_guide/s-memory-transhuge
 */
template <class T, std::size_t N = (1u << 21u), auto on_error = [] { return nullptr; }>
struct transparent_huge_pages {
  using value_type = T;
  template<class U> struct rebind {
    using other = transparent_huge_pages<U, N, on_error>;
  };

  static constexpr auto size = N;
  static constexpr auto prot = PROT_READ | PROT_WRITE;
  static constexpr auto flags = MAP_PRIVATE | MAP_ANONYMOUS | MAP_POPULATE | MAP_HUGETLB;
  static constexpr auto round = [](std::size_t n) { return (((n - 1u) / N) + 1u) * N; };

  constexpr transparent_huge_pages() noexcept = default;

  [[nodiscard]] constexpr auto allocate(std::size_t n) noexcept(noexcept(on_error())) -> T* {
    if (n > std::numeric_limits<std::size_t>::max() / sizeof(T)) [[unlikely]] {
      return on_error();
    }
    void *ptr{};
    posix_memalign(&ptr, N, n * sizeof(T));
    madvise(ptr, n * sizeof(T), MADV_HUGEPAGE);
    if (not ptr) [[unlikely]] {
      return on_error();
    }
    return static_cast<T*>(ptr);
  }

  #if __cpp_lib_allocate_at_least >= 202302L
  constexpr std::allocation_result<T*, std::size_t> allocate_at_least(std::size_t n) noexcept(noexcept(allocate(n)) {
    return { allocate(n), round(n * sizeof(T)) / sizeof(T) };
  }
  #endif

  constexpr void deallocate(T *ptr, [[maybe_unused]] std::size_t n) noexcept {
    std::free(ptr);
  }
};
} // namespace mem
#endif

#if __has_include(<numa.h>)
#include <numa.h>
namespace alloc::inline v1_0_2 {
/**
 * `-lnuma`
 * https://en.wikipedia.org/wiki/Non-uniform_memory_access
 * https://man7.org/linux/man-pages/man3/numa.3.html
 * https://www.intel.com/content/www/us/en/developer/articles/technical/use-intel-quickassist-technology-efficiently-with-numa-awareness.html
 */
template<class T, auto on_error = [] { return nullptr; }>
struct numa {
  using value_type = T;
  using node_type = int;
  template<class U> struct rebind {
    using other = numa<U, on_error>;
  };

  constexpr numa(node_type node = {}) noexcept : node{node} { }

  /**
   * The size argument (n) will be rounded up to a multiple of the system page size.
   */
  [[nodiscard]] constexpr auto allocate(std::size_t n) noexcept(noexcept(on_error())) -> T* {
    auto ptr = numa_alloc_onnode(n * sizeof(T), node);
    if (not ptr) [[unlikely]] {
      return on_error();
    }
    return std::bit_cast<T*>(ptr);
  }

  #if __cpp_lib_allocate_at_least >= 202302L
  constexpr std::allocation_result<T*, std::size_t> allocate_at_least(std::size_t n) noexcept(noexcept(allocate(n)) {
    return { allocate(n), n };
  }
  #endif

  /**
   * The size argument (n) will be rounded up to a multiple of the system page size.
   */
  constexpr void deallocate(T* ptr, std::size_t n) noexcept {
    numa_free(ptr, n * sizeof(T));
  }

  node_type node{};
};
} // namespace mem
#endif

#ifndef NTEST
static_assert(([] {
  // alloc::allocator
  {
    static_assert(not alloc::allocator<void>);
    static_assert(not alloc::allocator<int>);
    static_assert(alloc::allocator<std::allocator<int>>);
    static_assert(alloc::allocator<alloc::stack<int, 1024u>>);
    #if __has_include(<sys/mman.h>)
    static_assert(alloc::allocator<alloc::huge_pages<int>>);
    #endif
    #if __has_include(<numa.h>)
    static_assert(alloc::allocator<alloc::numa<int>>);
    #endif
  }

  // alloc::stack
  {
    static_assert(not []<class T, auto... Vs> { return requires { alloc::stack<T, Vs...>{}; }; }.template operator()<int, 1u>());
    static_assert(not []<class T, auto... Vs> { return requires { alloc::stack<T, Vs...>{}; }; }.template operator()<int, 2u>());
    static_assert(not []<class T, auto... Vs> { return requires { alloc::stack<T, Vs...>{}; }; }.template operator()<int, sizeof(int), 1u + alignof(std::max_align_t)>());
    static_assert([]<class T, auto... Vs> { return requires { alloc::stack<T, Vs...>{}; }; }.template operator()<int, sizeof(int) * 8u>());
    static_assert([]<class T, auto... Vs> { return requires { alloc::stack<T, Vs...>{}; }; }.template  operator()<int, alignof(int)>());
    static_assert(sizeof(alloc::stack<int, 16u>) >= sizeof(std::array<std::byte, 16u>));
  }

  #if __has_include(<sys/mman.h>)
  // alloc::huge_pages
  {
    struct empty { };
    static_assert([]<class T, auto... Vs> { return requires { alloc::huge_pages<T, Vs...>{}; }; }.template operator()<int>());
    static_assert([]<class T, auto... Vs> { return requires { alloc::huge_pages<T, Vs...>{}; }; }.template operator()<int, 32u>());
    static_assert(sizeof(empty) == sizeof(alloc::huge_pages<int>));
    alloc::huge_pages<int> allocator{};
    static_assert(1u << 21u == allocator.size);
  }
  #endif

  #if __has_include(<sys/mman.h>) and __has_include(<cstdlib>)
  // alloc::transparent_huge_pages
  {
    struct empty { };
    static_assert([]<class T, auto... Vs> { return requires { alloc::transparent_huge_pages<T, Vs...>{}; }; }.template operator()<int>());
    static_assert([]<class T, auto... Vs> { return requires { alloc::transparent_huge_pages<T, Vs...>{}; }; }.template operator()<int, 32u>());
    static_assert(sizeof(empty) == sizeof(alloc::huge_pages<int>));
    alloc::transparent_huge_pages<int> allocator{};
    static_assert(1u << 21u == allocator.size);
  }
  #endif

  #if __has_include(<numa.h>)
  // alloc::numa
  {
    static_assert([]<class T, auto... Vs> { return requires { alloc::numa<T, Vs...>{}; }; }.template operator()<int>());
    static_assert([]<class T, auto... Vs> { return requires { alloc::numa<T, Vs...>{}; }; }.template operator()<int, 32u>());
    static_assert(sizeof(alloc::numa<int>::node_type) == sizeof(alloc::numa<int>));
  }
  #endif
}(), true));
#endif // NTEST
