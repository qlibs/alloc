// <!--
// The MIT License (MIT)
//
// Copyright (c) 2024-2025 Kris Jusiak <kris@jusiak.net>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//
#if 0
// -->
[Overview](#Overview) / [API](#API) / [FAQ](#FAQ) / [Resources](#Resources)

## MEM: Memory Allocator library

[![MIT Licence](http://img.shields.io/badge/license-MIT-blue.svg)](https://opensource.org/license/mit)
[![Version](https://img.shields.io/github/v/release/qlibs/mem)](https://github.com/qlibs/mem/releases)
[![Build](https://img.shields.io/badge/build-green.svg)](https://godbolt.org/z/Yh6r9h9Pf)
[![Try it online](https://img.shields.io/badge/try%20it-online-blue.svg)](https://godbolt.org/z/WdaTrqrxK)

  > [https://en.wikipedia.org/wiki/Allocator_C++](https://en.wikipedia.org/wiki/Allocator_(C%2B%2B))

### Features

- Single header (https://raw.githubusercontent.com/qlibs/mem/main/mem) / C++20 module (https://raw.githubusercontent.com/qlibs/mem/main/mem.cppm)
- [C++23](https://eel.is/c++draft/allocator.requirements) standard compliant [API](#api)
- Verifies itself upon include (can be disabled with `-DNTEST` - see [FAQ](#faq))

### Requirements

- C++20 ([clang++12+, g++11+](https://en.cppreference.com/w/cpp/compiler_support)) / [`Linux`](https://en.wikipedia.org/wiki/Linux)\* / [`libnuma`](https://github.com/numactl/numactl)\*

### Overview

```cpp
int main() {
  /// concepts
  static_assert(mem::allocator_like<std::allocator<int>>);
  static_assert(mem::allocator_like<mem::allocator::aligned<int, std::align_val_t(64u)>>);
  static_assert(mem::allocator_like<mem::allocator::stack<int, 1024u>>);
  static_assert(mem::allocator_like<mem::allocator::transparent_huge_pages<int>>);
  static_assert(mem::allocator_like<mem::allocator::huge_pages<int>>);
  static_assert(mem::allocator_like<mem::allocator::numa<int>>);

  /// usage
  std::vector<int, mem::allocator::aligned<int, std::align_val_t(64u)>> v{};
  std::vector<int, mem::allocator::stack<int, 1024u>> v{};
  /// echo 20 > /proc/sys/vm/nr_hugepages
  std::vector<int, mem::allocator::huge_pages<int>> v{};
  /// echo always > /sys/kernel/mm/transparent_hugepage/hugepages-2048kB/enabled
  std::vector<int, mem::allocator::transparent_huge_pages<int>> v{};
  /// -lnuma (requires libnuma-dev)
  std::vector<int, mem::allocator::numa<int>> v{};
}
```

### API

```cpp
namespace mem::v1_1_0 {
template<class TAllocator> concept allocator_like =
  requires(TAllocator alloc, typename TAllocator::value_type* ptr, std::size_t n) {
    typename TAllocator::value_type;
    { alloc.allocate(n) } -> std::same_as<decltype(ptr)>;
    { alloc.deallocate(ptr, n) } -> std::same_as<void>;
    #if __cpp_lib_allocate_at_least >= 202302L
    { allocate_at_least(n) } -> std::same_as<std::allocation_result<T*, std::size_t>>;
    #endif
  };

inline namespace allocator {
  template<class T,
    std::align_val_t alignment = 64u,
    auto on_error = [] { return nullptr; }
  > requires (std::has_single_bit(std::size_t(alignment)))
  struct aligned {
    using value_type = T;

    constexpr aligned() noexcept = default;
    constexpr ~aligned() noexcept = default;

    [[nodiscard]]
    constexpr auto allocate(std::size_t n) noexcept(noexcept(on_error())) -> T*;

    #if __cpp_lib_allocate_at_least >= 202302L
    [[nodiscard]]
    constexpr auto allocate_at_least(std::size_t n) noexcept(noexcept(allocate(n));
    #endif

    constexpr void deallocate(T* ptr, std::size_t n) noexcept;
  };

  template<
    class T,
    std::size_t N,
    std::align_val_t alignment = alignof(T),
    auto on_error = [] { return nullptr; }> requires
      (std::has_single_bit(std::size_t(alignment))) and
      (std::size_t(alignment) <= alignof(std::max_align_t)) and
      (not (N % std::size_t(alignment)))
  struct stack {
    using value_type = T;

    constexpr stack() noexcept = default;
    constexpr ~stack() noexcept = default;

    [[nodiscard]]
    constexpr auto allocate(std::size_t n) noexcept(noexcept(on_error())) -> T*;

    #if __cpp_lib_allocate_at_least >= 202302L
    [[nodiscard]]
    constexpr auto allocate_at_least(std::size_t n) noexcept(noexcept(allocate(n));
    #endif

    constexpr void deallocate(T* ptr, std::size_t n) noexcept;
  };

  template<class T,
    std::size_t N = (1u << 21u),
    auto on_error = [] { return nullptr; }>
  struct transparent_huge_pages {
    using value_type = T;

    constexpr transparent_huge_pages() noexcept = default;
    constexpr ~transparent_huge_pages() noexcept = default;

    [[nodiscard]]
    constexpr auto allocate(std::size_t n) noexcept(noexcept(on_error())) -> T*;

    #if __cpp_lib_allocate_at_least >= 202302L
    [[nodiscard]]
    constexpr auto allocate_at_least(std::size_t n) noexcept(noexcept(allocate(n));
    #endif

    constexpr void deallocate(T *ptr, std::size_t n) noexcept;
  };

  struct huge_pages {
    using value_type = T;

    constexpr huge_pages() noexcept = default;
    constexpr ~huge_pages() noexcept = default;

    [[nodiscard]]
    constexpr auto allocate(std::size_t n) noexcept(noexcept(on_error())) -> T*;

    #if __cpp_lib_allocate_at_least >= 202302L
    [[nodiscard]]
    constexpr auto allocate_at_least(std::size_t n) noexcept(noexcept(allocate(n));
    #endif

    constexpr void deallocate(T *ptr, std::size_t n) noexcept;
  };

  template<class T, auto on_error = [] { return nullptr; }>
  struct numa {
    using value_type = T;

    constexpr explicit numa(auto node = {}) noexcept;
    constexpr ~numa() noexcept = default;

    [[nodiscard]]
    constexpr auto allocate(std::size_t n) noexcept(noexcept(on_error())) -> T*;

    #if __cpp_lib_allocate_at_least >= 202302L
    [[nodiscard]]
    constexpr auto allocate_at_least(std::size_t n) noexcept(noexcept(allocate(n));
    #endif

    constexpr void deallocate(T* ptr, std::size_t n) noexcept;
  };
} // namespace allocator
} // namespace mem
```

### FAQ

> - How to disable running tests at compile-time?
>
>   When `-DNTEST` is defined static_asserts tests wont be executed upon inclusion.
>   Note: Use with caution as disabling tests means that there are no gurantees upon inclusion that given compiler/env combination works as expected.
>
> - Similar projects?
>   [std::pmr](https://en.cppreference.com/w/cpp/header/memory)

### Resources

> `std::allocator`
> - https://eel.is/c++draft/allocator.requirements
> - https://en.cppreference.com/w/cpp/memory/allocator

> Huge Pages
> - https://www.kernel.org/doc/html/latest/admin-guide/mm/hugetlbpage.html
> - https://www.man7.org/linux/man-pages/man2/mmap.2.html
> - https://www.intel.com/content/www/us/en/docs/programmable/683840/1-2-1/enabling-hugepages.html
> - https://github.com/libhugetlbfs/libhugetlbfs
> - https://wiki.debian.org/Hugepages

> Transparent Huge Pages
> - https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html
> - https://man7.org/linux/man-pages/man2/madvise.2.html
> - https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/6/html/performance_tuning_guide/s-memory-transhuge

> Non Uniform Memory Access
> - https://en.wikipedia.org/wiki/Non-uniform_memory_access
> - https://man7.org/linux/man-pages/man3/numa.3.html
> - https://www.intel.com/content/www/us/en/developer/articles/technical/use-intel-quickassist-technology-efficiently-with-numa-awareness.html

### License

> - [MIT](LICENSE)

<!--
#endif

#pragma once

#include <cstdint>
#include <cstddef>
#include <cassert>

#include <bitset>
#include <bit>
#include <numeric>
#include <memory>
#include <array>

#if __has_include(<sys/mman.h>)
#include <sys/mman.h>
#endif

#if  __has_include(<cstdlib>)
#include <cstdlib>
#endif

#if __has_include(<numa.h>)
#include <numa.h>
#endif

namespace mem::inline v1_1_0 {
template<class TAllocator>
concept allocator_like = requires(TAllocator alloc, typename TAllocator::value_type* ptr, std::size_t n) {
  typename TAllocator::value_type;
  { alloc.allocate(n) } -> std::same_as<decltype(ptr)>;
  { alloc.deallocate(ptr, n) } -> std::same_as<void>;
  #if __cpp_lib_allocate_at_least >= 202302L
  { allocate_at_least(n) } -> std::same_as<std::allocation_result<T*, std::size_t>>;
  #endif
};

inline namespace allocator {
  namespace utility {
    inline constexpr auto align = [](const std::size_t n, const std::align_val_t alignment) {
      return (n + (std::size_t(alignment) - 1u)) & ~(std::size_t(alignment) - 1u);
    };

    inline constexpr auto round = [](const std::size_t n, const std::size_t size) {
      assert(n > 1u and size > 0u);
      return (((n - 1u) / size) + 1u) * size;
    };
  } // namespace utility

  template<class T, std::align_val_t alignment = std::align_val_t(64u), auto on_error = [] { return nullptr; }>
    requires (std::has_single_bit(std::size_t(alignment)))
  struct aligned {
    using value_type = T;
    template<class U> struct rebind {
      using other = aligned<T, alignment, on_error>;
    };

    constexpr aligned() noexcept = default;
    constexpr ~aligned() noexcept = default;

    [[nodiscard]] constexpr auto allocate(std::size_t n) noexcept(noexcept(on_error())) -> T* {
      return reinterpret_cast<T*>(::operator new[](n * sizeof(T), alignment));
    }

    #if __cpp_lib_allocate_at_least >= 202302L
    [[nodiscard]] constexpr auto allocate_at_least(std::size_t n) noexcept(noexcept(allocate(n)) {
      return std::allocation_result<T*, std::size_t>{
        allocate(n), utility::align(n * sizeof(T), alignment) / sizeof(T)
      };
    }
    #endif

    constexpr void deallocate(T* ptr, [[maybe_unused]] std::size_t n) noexcept {
      ::operator delete[](ptr, alignment);
    }
  };

  template<class T, std::size_t N, std::align_val_t alignment = std::align_val_t(alignof(T)), auto on_error = [] { return nullptr; }>
    requires
      (std::has_single_bit(std::size_t(alignment))) and
      (std::size_t(alignment) <= alignof(std::max_align_t)) and
      (not (N % std::size_t(alignment)))
  struct stack {
    using value_type = T;
    template<class U> struct rebind {
      using other = stack<U, N, alignment, on_error>;
    };

    constexpr stack() noexcept = default;
    constexpr ~stack() noexcept = default;

    [[nodiscard]] constexpr auto allocate(std::size_t n) noexcept(noexcept(on_error())) -> T* {
      const auto aligned = utility::align(n * sizeof(T), alignment);
      if (std::size_t(data_.data() + N - sp_) < utility::align(n * sizeof(T), alignment)) [[unlikely]] {
        return on_error();
      }
      auto ptr = reinterpret_cast<T*>(sp_);
      sp_ += aligned;
      return ptr;
    }

    #if __cpp_lib_allocate_at_least >= 202302L
    [[nodiscard]] constexpr auto allocate_at_least(std::size_t n) noexcept(noexcept(allocate(n)) {
      return std::allocation_result<T*, std::size_t>{
        allocate(n),
        utility::align(n * sizeof(T), alignment) / sizeof(T)
      };
    }
    #endif

    constexpr void deallocate(T* ptr, std::size_t n) noexcept {
      const auto aligned = utility::align(n * sizeof(T), alignment);
      auto p = static_cast<std::byte*>(ptr);
      if (p + aligned != sp_) [[unlikely]] {
        return;
      }
      sp_ = p;
    }

   private:
    alignas(std::size_t(alignment)) std::array<std::byte, N> data_{};
    std::byte* sp_{data_.data()};
  };

  #if __has_include(<sys/mman.h>) and __has_include(<cstdlib>)
  /**
   * `echo always > /sys/kernel/mm/transparent_hugepage/hugepages-2048kB/enabled`
   * https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html
   * https://man7.org/linux/man-pages/man2/madvise.2.html
   * https://docs.redhat.com/en/documentation/red_hat_enterprise_linux/6/html/performance_tuning_guide/s-memory-transhuge
   */
  template<class T, std::size_t N = (1u << 21u), auto on_error = [] { return nullptr; }>
  struct transparent_huge_pages {
    using value_type = T;
    template<class U> struct rebind {
      using other = transparent_huge_pages<U, N, on_error>;
    };
    static constexpr auto size = N;

    constexpr transparent_huge_pages() noexcept = default;
    constexpr ~transparent_huge_pages() noexcept = default;

    [[nodiscard]] constexpr auto allocate(std::size_t n) noexcept(noexcept(on_error())) -> T* {
      if (n > std::numeric_limits<std::size_t>::max() / sizeof(T)) [[unlikely]] {
        return on_error();
      }
      void *ptr{};
      posix_memalign(&ptr, N, n * sizeof(T));
      madvise(ptr, n * sizeof(T), MADV_HUGEPAGE);
      if (not ptr) [[unlikely]] {
        return on_error();
      }
      return static_cast<T*>(ptr);
    }

    #if __cpp_lib_allocate_at_least >= 202302L
    [[nodiscard]] constexpr auto allocate_at_least(std::size_t n) noexcept(noexcept(allocate(n)) {
      return std::allocation_result<T*, std::size_t>{
        allocate(n),
        utility::round(n * sizeof(T), size) / sizeof(T)
      };
    }
    #endif

    constexpr void deallocate(T *ptr, [[maybe_unused]] std::size_t n) noexcept {
      std::free(ptr);
    }
  };
  #endif

  #if __has_include(<sys/mman.h>)
  /**
   * `echo 20 > /proc/sys/vm/nr_hugepages`
   * https://www.kernel.org/doc/html/latest/admin-guide/mm/hugetlbpage.html
   * https://www.man7.org/linux/man-pages/man2/mmap.2.html
   * https://www.intel.com/content/www/us/en/docs/programmable/683840/1-2-1/enabling-hugepages.html
   * https://github.com/libhugetlbfs/libhugetlbfs
   * https://wiki.debian.org/Hugepages
   */
  template <class T, std::size_t N = (1u << 21u), auto on_error = [] { return nullptr; }>
  struct huge_pages {
    using value_type = T;
    template<class U> struct rebind {
      using other = huge_pages<U, N, on_error>;
    };
    static constexpr auto size = N;

    constexpr huge_pages() noexcept = default;
    constexpr ~huge_pages() noexcept = default;

    [[nodiscard]] constexpr auto allocate(std::size_t n) noexcept(noexcept(on_error())) -> T* {
      constexpr auto prot = PROT_READ | PROT_WRITE;
      constexpr auto flags = MAP_PRIVATE | MAP_ANONYMOUS | MAP_POPULATE | MAP_HUGETLB;

      if (n > std::numeric_limits<std::size_t>::max() / sizeof(T)) [[unlikely]] {
        return on_error();
      }
      auto ptr = reinterpret_cast<T*>(mmap(nullptr, utility::round(n * sizeof(T), size), prot, flags, -1, 0));
      if (ptr == MAP_FAILED) [[unlikely]] {
        return on_error();
      }
      return ptr;
    }

    #if __cpp_lib_allocate_at_least >= 202302L
    [[nodiscard]] constexpr auto allocate_at_least(std::size_t n) noexcept(noexcept(allocate(n)) {
      return std::allocation_result<T*, std::size_t>{
        allocate(n),
        utility::round(n * sizeof(T), size) / sizeof(T)
      };
    }
    #endif

    constexpr void deallocate(T *ptr, std::size_t n) noexcept {
      munmap(ptr, utility::round(n, size));
    }
  };
  #endif

  #if __has_include(<numa.h>)
  /**
   * `-lnuma`
   * https://en.wikipedia.org/wiki/Non-uniform_memory_access
   * https://man7.org/linux/man-pages/man3/numa.3.html
   * https://www.intel.com/content/www/us/en/developer/articles/technical/use-intel-quickassist-technology-efficiently-with-numa-awareness.html
   */
  template<class T, auto on_error = [] { return nullptr; }>
  struct numa {
    using value_type = T;
    template<class U> struct rebind {
      using other = numa<U, on_error>;
    };

    constexpr explicit numa(int node = {}) noexcept : node_{node} { }
    constexpr ~numa() noexcept = default;

    /**
     * The size argument (n) will be rounded up to a multiple of the system page size.
     */
    [[nodiscard]] constexpr auto allocate(std::size_t n) noexcept(noexcept(on_error())) -> T* {
      auto ptr = numa_alloc_onnode(n * sizeof(T), node_);
      if (not ptr) [[unlikely]] {
        return on_error();
      }
      return reinterpret_cast<T*>(ptr);
    }

    #if __cpp_lib_allocate_at_least >= 202302L
    [[nodiscard]] constexpr auto allocate_at_least(std::size_t n) noexcept(noexcept(allocate(n)) {
      return std::allocation_result<T*, std::size_t>{
        allocate(n),
        n
      };
    }
    #endif

    /**
     * The size argument (n) will be rounded up to a multiple of the system page size.
     */
    constexpr void deallocate(T* ptr, std::size_t n) noexcept {
      numa_free(ptr, n * sizeof(T));
    }

   private:
    int node_{};
  };
  #endif
} // namespace allocator
} // namespace mem

#ifndef NTEST
static_assert(([] {
  struct empty { };

  // mem::utility::align
  {
    static_assert(mem::utility::align(0u, std::align_val_t{8u}) == 0u);
    static_assert(mem::utility::align(1u, std::align_val_t{8u}) == 8u);
    static_assert(mem::utility::align(8u, std::align_val_t{8u}) == 8u);
    static_assert(mem::utility::align(9u, std::align_val_t{8u}) == 16u);
    static_assert(mem::utility::align(15u, std::align_val_t{8u}) == 16u);
    static_assert(mem::utility::align(16u, std::align_val_t{8u}) == 16u);
    static_assert(mem::utility::align(17u, std::align_val_t{8u}) == 24u);
    static_assert(mem::utility::align(5u, std::align_val_t{1u}) == 5u);
    static_assert(mem::utility::align(123u, std::align_val_t{64u}) == 128u);
    static_assert(mem::utility::align(256u, std::align_val_t{256u}) == 256u);
    static_assert(mem::utility::align(511u, std::align_val_t{256u}) == 512u);
  }

  // mem::utility::round
  {
    static_assert(mem::utility::round(2u, 2u) == 2u);
    static_assert(mem::utility::round(3u, 2u) == 4u);
    static_assert(mem::utility::round(5u, 4u) == 8u);
    static_assert(mem::utility::round(8u, 4u) == 8u);
    static_assert(mem::utility::round(9u, 4u) == 12u);
    static_assert(mem::utility::round(15u, 16u) == 16u);
    static_assert(mem::utility::round(16u, 16u) == 16u);
    static_assert(mem::utility::round(17u, 16u) == 32u);
  }

  // mem::allocator_like
  {
    static_assert(not mem::allocator_like<void>);
    static_assert(not mem::allocator_like<int>);
    static_assert(mem::allocator_like<std::allocator<int>>);
    static_assert(mem::allocator_like<mem::stack<int, 1024u>>);
    #if __has_include(<sys/mman.h>)
    static_assert(mem::allocator_like<mem::huge_pages<int>>);
    #endif
    #if __has_include(<numa.h>)
    static_assert(mem::allocator_like<mem::numa<int>>);
    #endif
  }

  // mem::allocator::aligned
  {
    static_assert([]<class T, auto... Vs> { return requires { mem::allocator::aligned<T, Vs...>{}; }; }.template operator()<int>());
    static_assert([]<class T, auto... Vs> { return requires { mem::allocator::aligned<T, Vs...>{}; }; }.template operator()<int, std::align_val_t(64u)>());
  }

  // mem::allocator::stack
  {
    static_assert(not []<class T, auto... Vs> { return requires { mem::allocator::stack<T, Vs...>{}; }; }.template operator()<int, 1u>());
    static_assert(not []<class T, auto... Vs> { return requires { mem::allocator::stack<T, Vs...>{}; }; }.template operator()<int, 2u>());
    static_assert(not []<class T, auto... Vs> { return requires { mem::allocator::stack<T, Vs...>{}; }; }.template operator()<int, sizeof(int), 1u + alignof(std::max_align_t)>());
    static_assert([]<class T, auto... Vs> { return requires { mem::allocator::stack<T, Vs...>{}; }; }.template operator()<int, sizeof(int) * 8u>());
    static_assert([]<class T, auto... Vs> { return requires { mem::allocator::stack<T, Vs...>{}; }; }.template operator()<int, alignof(int)>());
    static_assert(sizeof(mem::allocator::stack<int, 16u>) >= sizeof(std::array<std::byte, 16u>));
  }

  #if __has_include(<sys/mman.h>)
  // mem::allocator::huge_pages
  {
    static_assert([]<class T, auto... Vs> { return requires { mem::allocator::huge_pages<T, Vs...>{}; }; }.template operator()<int>());
    static_assert([]<class T, auto... Vs> { return requires { mem::allocator::huge_pages<T, Vs...>{}; }; }.template operator()<int, 32u>());
    static_assert(sizeof(empty) == sizeof(mem::allocator::huge_pages<int>));
    mem::allocator::huge_pages<int> allocator{};
    static_assert(1u << 21u == allocator.size);
  }
  #endif

  #if __has_include(<sys/mman.h>) and __has_include(<cstdlib>)
  // mem::allocator::transparent_huge_pages
  {
    static_assert([]<class T, auto... Vs> { return requires { mem::allocator::transparent_huge_pages<T, Vs...>{}; }; }.template operator()<int>());
    static_assert([]<class T, auto... Vs> { return requires { mem::allocator::transparent_huge_pages<T, Vs...>{}; }; }.template operator()<int, 32u>());
    static_assert(sizeof(empty) == sizeof(mem::allocator::huge_pages<int>));
    mem::allocator::transparent_huge_pages<int> allocator{};
    static_assert(1u << 21u == allocator.size);
  }
  #endif

  #if __has_include(<numa.h>)
  // mem::allocator::numa
  {
    static_assert([]<class T, auto... Vs> { return requires { mem::allocator::numa<T, Vs...>{}; }; }.template operator()<int>());
    static_assert([]<class T, auto... Vs> { return requires { mem::allocator::numa<T, Vs...>{}; }; }.template operator()<int, 32u>());
  }
  #endif
}(), true));
#endif // NTEST
